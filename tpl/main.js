// Generated by CoffeeScript 1.6.2
(function() {
  var $$, Slider, addAlbumToPlaylist, babyUrADrag, detectSupport, displaytime, initInfo, initLibrary, initPanes, initPlayer, initPlaylist, log, play, playNext, playPrev, playRow, savePlaylist, setInfo, setInterval, setSize, setTimeout, store, _activepane, _audio, _codec, _curplaying, _draggingseekbar, _infocache, _inforeq, _root;

  _root = '';

  _audio = $('audio')[0];

  _inforeq = null;

  _activepane = null;

  _curplaying = {
    trackId: null,
    length: 1
  };

  _infocache = {
    tracks: {},
    albums: {},
    artists: {}
  };

  _codec = null;

  _draggingseekbar = false;

  setTimeout = function(t, f) {
    return window.setTimeout(f, t);
  };

  setInterval = function(t, f) {
    return window.setInterval(f, t);
  };

  log = function() {
    if ((typeof console !== "undefined" && console !== null ? console.log : void 0) != null) {
      return console.log.apply(console, arguments);
    }
  };

  $$ = function(s) {
    return $(s).toArray();
  };

  store = {
    get: function(k) {
      return JSON.parse(localStorage.getItem(k));
    },
    set: function(k, v) {
      return localStorage.setItem(k, JSON.stringify(v));
    },
    init: function(k, v) {
      if (!localStorage.getItem(k)) {
        return localStorage.setItem(k, JSON.stringify(v));
      }
    }
  };

  String.prototype.quote = function() {
    return this.replace(/</g, '&lt').replace(/>/g, '&gt').replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&apos;').replace(/\//g, '&#x2f;');
  };

  String.prototype.toNum = function() {
    return parseInt(this, 10);
  };

  jQuery.fn.findNext = function(sel, num, _prev) {
    var arewe, ref;

    if (num == null) {
      num = 1;
    }
    if (_prev == null) {
      _prev = false;
    }
    ref = _prev ? $(this).prev() : $(this).next();
    while (true) {
      if (ref.length === 0) {
        return false;
      }
      arewe = ref.is(sel);
      if (arewe) {
        num -= 1;
      }
      if (arewe && num === 0) {
        return ref;
      }
      ref = _prev ? ref.prev() : ref.next();
    }
  };

  jQuery.fn.findPrev = function(sel, num) {
    if (num == null) {
      num = 1;
    }
    return this.findNext(sel, num, true);
  };

  initLibrary = function() {
    var addAlbum, chain, cleartimer, filter, pterm, selectLRow, t, timer, toggleArtist;

    $('#library ol').scrollbar({
      wheelSpeed: 150
    });
    toggleArtist = function(elem) {
      var n;

      elem = elem.closest('li');
      if (!elem.is('.artist')) {
        return;
      }
      n = elem.next();
      while (true) {
        if (!n.hasClass('album')) {
          break;
        }
        if (n.css('display') === 'block') {
          n.css('display', 'none');
          elem.find('i').attr('class', 'icon-expand-alt');
        } else {
          n.css('display', 'block');
          elem.find('i').attr('class', 'icon-collapse-alt');
        }
        n = n.next();
      }
      return $('#library ol').scrollbar('update');
    };
    selectLRow = function(elem) {
      if (!elem) {
        return false;
      }
      $('#library .active').removeClass('active');
      elem.closest('li').addClass('active');
      if (elem.position().top > $('#library ol').height() || elem.position().top < 0) {
        $('#library ol')[0].scrollTop += elem.closest('li').position().top;
        return $('#library ol').scrollbar('update');
      }
    };
    addAlbum = function(elem) {
      return addAlbumToPlaylist(elem.closest('li').attr('data-id'));
    };
    selectLRow($('#library li:first'));
    $('#library ol').on('click', 'li span', function() {
      return selectLRow($(this));
    });
    $('#library ol').on('click', '.artist i', function() {
      return toggleArtist($(this));
    });
    $('#library ol').on('dblclick', '.artist span', function(e) {
      e.preventDefault();
      selectLRow($(this));
      return toggleArtist($(this));
    });
    $('#library ol').on('mousedown', '.artist span', function(e) {
      var next, _results;

      if (e.button !== 1) {
        return;
      }
      e.preventDefault();
      selectLRow($(this));
      next = $(this).closest('li').next();
      _results = [];
      while (true) {
        if (!next.is('.album')) {
          break;
        }
        addAlbum(next);
        _results.push(next = next.next());
      }
      return _results;
    });
    $('#library ol').on('mousedown', '.album span', function(e) {
      if (e.button !== 1) {
        return;
      }
      e.preventDefault();
      selectLRow($(this));
      return addAlbum($(this));
    });
    $('#library ol').on('dblclick', '.album span', function(e) {
      e.preventDefault();
      return addAlbum($(this));
    });
    t = null;
    pterm = null;
    filter = function(e) {
      if (t) {
        clearTimeout(t);
      }
      return t = setTimeout(400, function() {
        var exc, term;

        $(e.target).removeClass('invalid');
        term = $(e.target).val().trim();
        if (term === pterm) {
          return;
        }
        pterm = term;
        if (term === '') {
          $('#library .artist').show();
          $('#library .album').hide();
          return;
        }
        try {
          term = new RegExp(term);
        } catch (_error) {
          exc = _error;
          $(e.target).addClass('invalid');
          return;
        }
        $('#library li').hide();
        $('#library ol')[0].scrollTop = 0;
        $$('#library li').forEach(function(elem) {
          elem = $(elem);
          if (elem.text().toLowerCase().match(term)) {
            if (elem.is('.artist')) {
              return elem.show();
            } else {
              return elem.findPrev('.artist').show();
            }
          }
        });
        return $('#library ol').scrollbar('update');
      });
    };
    $('#search input').on('keydown', filter);
    $('#search input').on('change', filter);
    chain = '';
    timer = null;
    cleartimer = null;
    return $('body').on('keydown', function(e) {
      var events, _ref, _ref1;

      if (((_ref = document.activeElement) != null ? (_ref1 = _ref.tagName) != null ? _ref1.toLowerCase() : void 0 : void 0) === 'input') {
        return;
      }
      if (!(_activepane != null ? _activepane.is('#library') : void 0)) {
        return;
      }
      if (e.ctrlKey || e.altKey) {
        return;
      }
      events = {
        27: function() {
          if (timer) {
            clearTimeout(timer);
          }
          if (cleartimer) {
            clearTimeout(cleartimer);
          }
          chain = '';
        },
        38: function() {
          return selectLRow($('#library .active').findPrev('li:visible'));
        },
        40: function() {
          return selectLRow($('#library .active').findNext('li:visible'));
        },
        39: function() {
          var act;

          act = $('#library .active');
          if (act.is('.artist')) {
            if (act.next().is(':visible')) {
              return selectLRow(act.next());
            } else {
              return toggleArtist(act);
            }
          }
        },
        37: function() {
          var act;

          act = $('#library .active');
          if (act.is('.album')) {
            return selectLRow(act.findPrev('.artist'));
          } else if (act.is('.artist') && act.next().is(':visible')) {
            return toggleArtist(act);
          }
        },
        33: function() {
          var n, r;

          n = Math.floor($('#library ol').height() / $('#library li:first').outerHeight());
          r = selectLRow($('#library .active').findPrev('li:visible', n));
          if (r === false) {
            return selectLRow($('#library li:first'));
          }
        },
        34: function() {
          var n, r;

          n = Math.floor($('#library ol').height() / $('#library li:first').outerHeight());
          r = selectLRow($('#library .active').findNext('li:visible', n));
          if (r === false) {
            return selectLRow($('#library li:last'));
          }
        },
        36: function() {
          return selectLRow($('#library li:first'));
        },
        35: function() {
          return selectLRow($('#library li:last'));
        },
        13: function() {
          var act;

          act = $('#library .active');
          if (act.is('.artist')) {
            toggleArtist(act);
          }
          if (act.is('.album')) {
            return addAlbum(act);
          }
        }
      };
      if (events[e.keyCode] != null) {
        e.preventDefault();
        return events[e.keyCode]();
      } else if (e.keyCode === 32 || (e.keyCode > 46 && e.keyCode < 91)) {
        e.preventDefault();
        chain += String.fromCharCode(e.keyCode).toLowerCase();
        if (timer) {
          clearTimeout(timer);
        }
        timer = setTimeout(100, function() {
          return $('#library li').each(function(i, elem) {
            elem = $(elem);
            if (elem.is(':visible') && elem.text().toLowerCase().indexOf(chain) === 0) {
              selectLRow(elem);
              return false;
            }
          });
        });
        if (cleartimer) {
          clearTimeout(cleartimer);
        }
        return cleartimer = setTimeout(3000, function() {
          return chain = '';
        });
      }
    });
  };

  initPlaylist = function() {
    var clearSelection, deSelectRow, selectRow, selectRowsUntil, setRowActive, sort;

    store.get('playlist').forEach(function(r) {
      return $('#playlist tbody').append(r);
    });
    $('#playlist-wrapper').scrollbar({
      wheelSpeed: 150
    });
    setRowActive = function(row) {
      row = $(row).closest('tr');
      $('#playlist tr').removeClass('active');
      row.addClass('active');
      setInfo(row.attr('data-id'));
      if (row.position().top > $('#playlist-wrapper').height() || row.position().top < 0) {
        $('#playlist-wrapper')[0].scrollTop += row.position().top;
        return $('#playlist-wrapper').scrollbar('update');
      }
    };
    selectRow = function(row, active) {
      if (active == null) {
        active = true;
      }
      if (!row) {
        return false;
      }
      row = $(row).closest('tr');
      row.addClass('selected');
      if (active) {
        return setRowActive(row);
      }
    };
    deSelectRow = function(row, active) {
      if (active == null) {
        active = true;
      }
      row = $(row).closest('tr');
      row.removeClass('selected');
      if (active) {
        return setRowActive(row);
      }
    };
    selectRowsUntil = function(stop, active) {
      var dir, row, _results;

      if (active == null) {
        active = true;
      }
      if (!stop) {
        return false;
      }
      stop = $(stop).closest('tr');
      row = $('#playlist .active');
      if (row.length === 0) {
        selectRow(stop, active);
        return;
      }
      dir = stop.index() > row.index() ? 'next' : 'prev';
      _results = [];
      while (true) {
        selectRow(row, false);
        if (row.is(stop)) {
          if (active) {
            setRowActive(row);
          }
          break;
        }
        _results.push(row = dir === 'next' ? row.next() : row.prev());
      }
      return _results;
    };
    clearSelection = function() {
      return $('#playlist tr').removeClass('selected').removeClass('active');
    };
    $('body').on('click', function(e) {
      if (!(_activepane != null ? _activepane.is('#playlist-wrapper') : void 0)) {
        return;
      }
      if ($(e.target).closest('tr').length === 1) {
        return;
      }
      return clearSelection();
    });
    $('#playlist tbody').on('click', 'tr', function(e) {
      if (e.shiftKey) {
        return selectRowsUntil(this);
      } else if (e.ctrlKey) {
        return selectRow(this);
      } else {
        clearSelection();
        return selectRow(this);
      }
    });
    $('#playlist tbody').on('dblclick', 'tr', function(e) {
      clearSelection();
      selectRow(this);
      return playRow(this);
    });
    $('body').bind('keydown', function(e) {
      var n, r;

      if (!(_activepane != null ? _activepane.is('#playlist-wrapper') : void 0)) {
        return;
      }
      if (e.ctrlKey && e.keyCode === 65) {
        e.preventDefault();
        return $('#playlist tbody tr').addClass('selected');
      } else if (e.keyCode === 46) {
        e.preventDefault();
        $('#playlist .selected').remove();
        return savePlaylist();
      } else if (e.keyCode === 38) {
        e.preventDefault();
        r = $('#playlist .active');
        if (r.length === 0) {
          return selectRow($('#playlist tbody tr:last'));
        }
        if (r.prev().length === 0) {
          return;
        }
        if (e.shiftKey) {
          if (r.hasClass('selected') && r.prev().hasClass('selected')) {
            deSelectRow(r);
          }
          return selectRow(r.prev());
        } else if (e.ctrlKey) {
          return r.removeClass('active').prev().addClass('active');
        } else {
          clearSelection();
          return selectRow(r.prev());
        }
      } else if (e.keyCode === 40) {
        e.preventDefault();
        r = $('#playlist .active');
        if (r.length === 0) {
          return selectRow($('#playlist tbody tr:first'));
        }
        if (r.next().length === 0) {
          return;
        }
        if (e.shiftKey) {
          if (r.hasClass('selected') && r.next().hasClass('selected')) {
            deSelectRow(r);
          }
          return selectRow(r.next());
        } else if (e.ctrlKey) {
          return r.removeClass('active').next().addClass('active');
        } else {
          clearSelection();
          return selectRow(r.next());
        }
      } else if (e.keyCode === 34) {
        e.preventDefault();
        n = Math.floor($('#playlist-wrapper').height() / $('#playlist tr:last').outerHeight());
        if (e.shiftKey) {
          r = selectRowsUntil($('#playlist .active').findNext('tr', n));
          if (r === false) {
            return selectRowsUntil($('#playlist tbody tr:last'));
          }
        } else {
          clearSelection();
          r = selectRow($('#playlist .active').findNext('tr', n));
          if (r === false) {
            return selectRow($('#playlist tbody tr:last'));
          }
        }
      } else if (e.keyCode === 33) {
        e.preventDefault();
        n = Math.floor($('#playlist-wrapper').height() / $('#playlist tr:last').outerHeight());
        if (e.shiftKey) {
          r = selectRowsUntil($('#playlist .active').findPrev('tr', n));
          if (r === false) {
            return selectRowsUntil($('#playlist tbody tr:first'));
          }
        } else {
          clearSelection();
          r = selectRow($('#playlist .active').findPrev('tr', n));
          if (r === false) {
            return selectRow($('#playlist tbody tr:first'));
          }
        }
      } else if (e.keyCode === 36) {
        e.preventDefault();
        if (e.shiftKey) {
          return selectRowsUntil($('#playlist tbody tr:first'));
        } else if (e.ctrlKey) {
          $('#playlist .active').removeClass('active');
          return $('#playlist tbody tr:first').addClass('active');
        } else {
          clearSelection();
          return selectRow($('#playlist tbody tr:first'));
        }
      } else if (e.keyCode === 35) {
        e.preventDefault();
        if (e.shiftKey) {
          return selectRowsUntil($('#playlist tbody tr:last'));
        } else if (e.ctrlKey) {
          $('#playlist .active').removeClass('active');
          return $('#playlist tbody tr:last').addClass('active');
        } else {
          clearSelection();
          return selectRow($('#playlist tbody tr:last'));
        }
      } else if (e.keyCode === 13) {
        e.preventDefault();
        return $('#playlist .active').dblclick();
      }
    });
    sort = null;
    return $('#playlist thead').on('click', 'th', function(e) {
      var body, dir, h, int, n, pn, psort, rows, sortFun;

      h = $(this);
      psort = null;
      if ($('#playlist thead').find('.icon-sort-up').length > 0) {
        psort = $('#playlist thead').find('.icon-sort-up').parent();
      } else if ($('#playlist thead').find('.icon-sort-down').length > 0) {
        psort = $('#playlist thead').find('.icon-sort-down').parent();
      }
      if (psort && h[0] === psort[0]) {
        psort = null;
      }
      dir = null;
      if (h.find('.icon-sort-up').length > 0) {
        dir = 'down';
        h.find('i').attr('class', 'icon-sort-down');
      } else if (h.find('.icon-sort-down').length > 0) {
        dir = 'up';
        h.find('i').attr('class', 'icon-sort-up');
      } else {
        dir = 'up';
        h.find('i').attr('class', 'icon-sort-up');
      }
      if (psort != null) {
        psort.find('i').attr('class', '');
      }
      body = $('#playlist tbody');
      rows = body.find('tr').toArray();
      n = h.index();
      pn = psort != null ? psort.index() : void 0;
      int = function(num) {
        return parseFloat(num.replace(':', '.'));
      };
      sortFun = function(rowa, rowb) {
        var a, b, fun, inpsort, r, _ref;

        if (((_ref = rowa.tagName) != null ? _ref.toLowerCase() : void 0) === 'tr') {
          a = $(rowa).find("td:eq(" + n + ")").text();
          b = $(rowb).find("td:eq(" + n + ")").text();
          inpsort = false;
        } else {
          inpsort = true;
          a = $(rowa).text();
          b = $(rowb).text();
        }
        if (dir === 'up' && h.attr('data-sort') === 'numeric') {
          fun = function() {
            if (int(a) === int(b)) {
              return 0;
            }
            if (int(a) > int(b)) {
              return 1;
            } else {
              return -1;
            }
          };
        } else if (dir === 'down' && h.attr('data-sort') === 'numeric') {
          fun = function() {
            if (int(a) === int(b)) {
              return 0;
            }
            if (int(b) > int(a)) {
              return 1;
            } else {
              return -1;
            }
          };
        } else if (dir === 'up') {
          fun = function() {
            return a.localeCompare(b);
          };
        } else if (dir === 'down') {
          fun = function() {
            return b.localeCompare(a);
          };
        }
        r = fun();
        if (r === 0 && !inpsort && (psort != null)) {
          r = sortFun($(rowa).find("td:eq(" + pn + ")"), $(rowb).find("td:eq(" + pn + ")"));
        }
        return r;
      };
      rows.sort(sortFun);
      body.html('');
      rows.forEach(function(r) {
        return body.append(r);
      });
      return savePlaylist();
    });
  };

  setInfo = function(trackId) {
    var set;

    set = function(track) {
      var album, artist;

      album = _infocache['albums'][track.album];
      artist = _infocache['artists'][album.artist];
      $('#info img').one('load', function() {
        return $('#info .table-wrapper').width($('#info').width() - $('#info img').width() - 20);
      });
      $('#info img').attr('src', album.coverdata);
      return $('#info tbody').html('').append("<tr>\n	<th>Artist name</th>\n	<td>" + (artist.name.quote() || '[Unknown]') + "</td>\n</tr>\n<tr>\n	<th>Album title</th>\n	<td>" + (album.name.quote() || '[Unknown]') + "</td>\n</tr>\n<tr>\n	<th>Track title</th>\n	<td>" + (track.name.quote() || '[Unknown]') + "</td>\n</tr>\n<tr>\n	<th>Released</th>\n	<td>" + (track.released || '[Unknown]') + "</td>\n</tr>\n<tr>\n	<th>Track number</th>\n	<td>" + (track.trackno || '[Unknown]') + "</td>\n</tr>\n<tr>\n	<th>Total tracks</th>\n	<td>" + (album.numtracks || '[Unknown]') + "</td>\n</tr>\n<tr>\n	<th>Disc number</th>\n	<td>" + (track.discno || '[Unknown]') + "</td>\n</tr>\n<tr>\n	<th>Total discs</th>\n	<td>" + (album.numdiscs || '[Unknown]') + "</td>\n</tr>\n<tr>\n	<th>Length</th>\n	<td>" + (displaytime(track.length || '[Unknown]')) + "</td>\n</tr>\n<tr>\n	<th>Filename</th>\n	<td>" + (track.path.split('/').pop().quote()) + "</td>\n</tr>\n<tr>\n	<th>Directory</th>\n	<td>" + (track.path.split('/').slice(0, -1).join('/').quote()) + "</td>\n</tr>");
    };
    if (_infocache['tracks'][trackId] != null) {
      return set(_infocache['tracks'][trackId]);
    } else {
      if (_inforeq) {
        _inforeq.abort();
      }
      return _inforeq = jQuery.ajax({
        url: "" + _root + "/get-track/" + trackId,
        type: 'get',
        dataType: 'json',
        success: function(data) {
          _inforeq = null;
          _infocache['artists'][data.artist.id] = data.artist;
          _infocache['albums'][data.album.id] = data.album;
          _infocache['tracks'][data.track.id] = data.track;
          return set(data.track);
        }
      });
    }
  };

  playNext = function(prev) {
    var n;

    if (prev == null) {
      prev = false;
    }
    n = prev ? $('#playlist .playing').prev() : $('#playlist .playing').next();
    $('#playlist .playing').removeClass('playing');
    if (n.length > 0) {
      playRow(n);
      return true;
    } else {
      return false;
    }
  };

  playPrev = function() {
    return playNext(true);
  };

  initPlayer = function() {
    var bufstart, seekbar;

    bufstart = null;
    $('#player').on('click', '.play', function(e) {
      var active;

      if (isNaN(_audio.duration)) {
        active = $('#playlist .active');
        if (active.length > 0) {
          return playRow(active);
        }
        return playRow($('#playlist tbody tr:eq(0)'));
      }
      return _audio.play();
    });
    $('#player').on('click', '.pause', function(e) {
      return _audio.pause();
    });
    $('#player').on('click', '.forward', function(e) {
      return playNext();
    });
    $('#player').on('click', '.backward', function(e) {
      return playPrev();
    });
    $('#player').on('click', '.stop', function(e) {
      $('.seekbar .buffer').css('width', '0px');
      _audio.pause();
      $('#playlist tr').removeClass('playing');
      _audio.src = '';
      $('#player').attr('class', 'right-of-library stopped');
      store.set('lasttrack', null);
      bufstart = null;
      return $('#status span:eq(0)').html('Stopped');
    });
    window.vol = new Slider({
      target: $('#player .volume'),
      move: function(pos) {
        var v;

        v = Math.min(1, pos * 2 / 100);
        _audio.volume = v;
        store.set('volume', v);
        return Math.round(pos);
      }
    });
    if (store.get('volume') !== null) {
      _audio.volume = store.get('volume');
      vol.setpos(_audio.volume * 100);
    } else {
      vol.setpos(50);
      _audio.volume = 0.5;
    }
    seekbar = new Slider({
      target: $('#player .seekbar'),
      start: function() {
        return _draggingseekbar = true;
      },
      move: function(pos) {
        var v;

        v = $('audio')[0].seekable.end(0) / 100 * pos;
        $('audio')[0].currentTime = v;
        return displaytime(v);
      },
      stop: function() {
        return _draggingseekbar = false;
      }
    });
    $(_audio).bind('play', function() {
      $('#player').attr('class', 'right-of-library playing');
      return $('#playlist .playing .icon-pause').attr('class', 'icon-play');
    });
    $(_audio).bind('pause', function() {
      $('#player').attr('class', 'right-of-library paused');
      $('#playlist .playing .icon-play').attr('class', 'icon-pause');
      return $('#status span:eq(0)').html('Paused');
    });
    $(_audio).bind('ended', function() {
      $('.seekbar .buffer').css('width', '0px');
      bufstart = null;
      if (!playNext()) {
        $('#player').attr('class', 'right-of-library stopped');
        store.set('lasttrack', null);
        return $('#status span:eq(0)').html('Stopped');
      }
    });
    $(_audio).bind('timeupdate', function(e) {
      var t, v;

      if (_draggingseekbar) {
        return;
      }
      v = _audio.currentTime / _curplaying.length * 100;
      seekbar.setpos(v);
      t = displaytime(_audio.currentTime);
      $('#status span:eq(0)').html('Playing');
      return $('#status span:eq(1)').html("" + t + " / " + (displaytime(_curplaying.length)));
    });
    $(_audio).bind('progress', function(e) {
      var c, dur, exc, r;

      try {
        c = Math.round(_audio.buffered.end(0) / _curplaying.length * 100);
      } catch (_error) {
        exc = _error;
        return;
      }
      if (c === 100) {
        return $('#status span:eq(2)').html("Buffer " + c + "%");
      } else {
        if (!bufstart) {
          bufstart = new Date().getTime() / 1000;
          return;
        }
        dur = new Date().getTime() / 1000 - bufstart;
        r = (dur / c) * (100 - c);
        return $('#status span:eq(2)').html("Buffer " + c + "% (~" + (Math.round(r)) + "s remaining)");
      }
    });
    return $(_audio).bind('progress', function(e) {
      var exc, v;

      try {
        v = _audio.buffered.end(0) / _curplaying.length * 100;
      } catch (_error) {
        exc = _error;
        return;
      }
      return $('.seekbar .buffer').css('width', "" + v + "%");
    });
  };

  Slider = (function() {
    function Slider(opt) {
      var my, setpos, start, stop, tooltip;

      this.opt = opt;
      my = this;
      opt.target = $(opt.target);
      opt.target.addClass('slider');
      opt.target.append('<span class="slider-bar"></span>');
      opt.target.append('<span class="slider-handle"></span>');
      this.bar = opt.target.find('.slider-bar');
      this.handle = opt.target.find('.slider-handle');
      tooltip = null;
      setpos = function(e) {
        var left, max, tip;

        left = e.pageX - my.bar.offset().left - my.handle.width();
        max = my.bar.width() - my.handle.width();
        if (left < 0) {
          left = 0;
        }
        if (left > max) {
          left = max;
        }
        my.handle.css('left', "" + left + "px");
        if (my.opt.move) {
          tip = my.opt.move(my.getpos());
        }
        if (tip != null) {
          if (tooltip === null) {
            $(my.opt.target).append("<span id='tooltip'></span>");
            tooltip = $('#tooltip');
          }
          tooltip.html(tip);
          return tooltip.css('left', "" + (left - 20) + "px");
        }
      };
      stop = function() {
        if (my.opt.stop) {
          my.opt.stop();
        }
        $('#tooltip').remove();
        return tooltip = null;
      };
      start = function() {
        if (my.opt.start) {
          return my.opt.start();
        }
      };
      this.bar.bind('click', setpos);
      babyUrADrag(this.handle, start, setpos, stop);
    }

    Slider.prototype.getpos = function() {
      return this.handle.css('left').toNum() / ((this.bar.width() - this.handle.width()) / 100);
    };

    Slider.prototype.setpos = function(p) {
      return this.handle.css('left', "" + ((this.bar.width() - this.handle.width()) / 100 * p) + "px");
    };

    return Slider;

  })();

  addAlbumToPlaylist = function(albumId) {
    return jQuery.ajax({
      url: "" + _root + "/get-album/" + albumId,
      type: 'get',
      dataType: 'json',
      success: function(data) {
        var pl, row, save, t, _i, _len, _ref;

        pl = $('#playlist tbody');
        save = [];
        _ref = data.tracks;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          t = _ref[_i];
          row = "<tr data-id=\"" + t.id + "\" data-length=\"" + t.length + "\">\n	<td></td>\n	<td>" + t.discno + "." + (t.trackno < 10 ? 0 : '') + t.trackno + "</td>\n	<td>" + (data.artistname.quote()) + " - " + (data.name.quote()) + "</td>\n	<td>" + (t.name.quote()) + "</td>\n	<td>" + (displaytime(t.length)) + "</td>\n</tr>";
          pl.append(row);
          save.push(row);
        }
        $('#playlist-wrapper').scrollbar('update');
        return store.set('playlist', store.get('playlist').concat(save));
      }
    });
  };

  displaytime = function(sec) {
    var m, s;

    m = Math.floor(sec / 60);
    s = Math.floor(sec % 60);
    return "" + m + ":" + (s < 10 ? 0 : '') + s;
  };

  play = function(trackId, length) {
    var row;

    if (_codec === null) {
      return;
    }
    jQuery.ajax({
      url: "" + _root + "/play-track/" + _codec + "/" + trackId,
      type: 'get',
      dataType: 'json',
      success: function(data) {
        var audio;

        _curplaying = {
          trackId: trackId,
          length: length
        };
        audio = $('#player audio')[0];
        audio.pause();
        audio.src = '';
        audio.src = data.src;
        return audio.play();
      }
    });
    row = $("#playlist tr[data-id=" + trackId + "]");
    $('#playlist tr').removeClass('playing');
    row.addClass('playing').find('td:eq(0)').html('<i class="icon-play"></i>');
    return store.set('lasttrack', trackId);
  };

  playRow = function(r) {
    return play($(r).attr('data-id'), $(r).attr('data-length'));
  };

  initPanes = function() {
    var setPane, setinfo, setlib;

    setPane = function(p) {
      _activepane = $(p);
      $('.pane-active').removeClass('pane-active');
      return _activepane.addClass('pane-active');
    };
    $('body').on('click', '#library', function() {
      return setPane(this);
    });
    $('body').on('click', '#playlist-wrapper', function() {
      return setPane(this);
    });
    $('body').on('click', '#player', function() {
      return setPane(this);
    });
    $('body').on('click', '#info', function() {
      return setPane(this);
    });
    $('body').on('keydown', function(e) {
      if (e.keyCode === 27) {
        e.preventDefault();
        _activepane = null;
        return $('.pane-active').removeClass('pane-active');
      }
    });
    setinfo = function(h, set) {
      set.css('height', "" + h + "px");
      $('#info .table-wrapper').css('height', "" + h + "px");
      $('#playlist-wrapper').css('bottom', "" + (h + $('#status').height() + 3) + "px");
      $('#playlist-wrapper').scrollbar('update');
      $('#info .table-wrapper').scrollbar('update');
      return $('#info .table-wrapper').width($('#info').width() - $('#info img').width() - 20);
    };
    setlib = function(w, set) {
      set.css('width', "" + w + "px");
      return $('.right-of-library').css('left', "" + ($('#library').width()) + "px");
    };
    return $('.resize-handle').each(function(i, elem) {
      var move, set, stop;

      elem = $(elem);
      set = elem.parent();
      if (elem.hasClass('resize-vertical')) {
        if (store.get('info-size')) {
          setinfo(store.get('info-size'), set);
        }
      } else {
        if (store.get('library-size')) {
          setlib(store.get('library-size'), set);
        }
      }
      move = function(e) {
        if (elem.hasClass('resize-vertical')) {
          return setinfo($(window).height() - e.pageY - $('#status').height(), set);
        } else {
          return setlib(e.pageX, set);
        }
      };
      stop = function() {
        if (elem.hasClass('resize-vertical')) {
          return store.set('info-size', $('#info').height());
        } else {
          return store.set('library-size', $('#library').width());
        }
      };
      return babyUrADrag(elem, null, move, stop);
    });
  };

  babyUrADrag = function(handle, start, move, end) {
    var dragging, mousedown, mousemove, mouseup;

    dragging = false;
    mousemove = function(e) {
      if (!dragging) {
        return;
      }
      setSize();
      return move != null ? move.apply(this, [e]) : void 0;
    };
    mousedown = function(e) {
      handle.addClass('dragging');
      dragging = true;
      $(handle).css('z-index', '99');
      document.body.focus();
      if (start != null) {
        start.apply(this, [e]);
      }
      return false;
    };
    mouseup = function(e) {
      handle.removeClass('dragging');
      dragging = false;
      return end != null ? end.apply(this, [e]) : void 0;
    };
    handle.on('mousedown', mousedown);
    $('body').on('mousemove', mousemove);
    return $('body').on('mouseup', mouseup);
  };

  initInfo = function() {
    return $('#info .table-wrapper').scrollbar({
      wheelSpeed: 150
    });
  };

  detectSupport = function() {
    var err, _ref, _ref1;

    err = [];
    if (!((_ref = window.JSON) != null ? _ref.parse : void 0)) {
      err.push("Your browser doesn't seem to support JSON");
    }
    if (!((_ref1 = window.localStorage) != null ? _ref1.setItem : void 0)) {
      err.push("Your browser doesn't seem to support localStorage");
    }
    if (_audio.canPlayType('audio/ogg; codecs="vorbis"') !== '') {
      _codec = 'ogg';
    } else if (_audio.canPlayType('audio/mp3; codecs="mp3"') !== '') {
      _codec = 'mp3';
    } else {
      err.push("Your browser doesn't seem to support either Ogg/Vorbis or MP3 playback");
    }
    if (err.length > 0) {
      return alert(err.join('\n'));
    }
  };

  setSize = function() {
    $('#library ol').css('height', "" + ($(window).height() - $('#library ol').offset().top) + "px");
    $('.seekbar').css('width', "" + ($('#player').width() - $('.volume').outerWidth() - $('.volume').position().left - 30) + "px");
    $('#playlist-wrapper').css('bottom', "" + ($('#info').height() + $('#status').height() + 3) + "px");
    return $('#info .table-wrapper').width($('#info').width() - $('#info img').width() - 20);
  };

  savePlaylist = function() {
    return store.set('playlist', $$('#playlist tbody tr').map(function(r) {
      return r.outerHTML;
    }));
  };

  $(document).ready(function() {
    detectSupport();
    $('input').val('');
    store.init('playlist', []);
    setSize();
    initPlayer();
    initLibrary();
    initInfo();
    initPlaylist();
    initPanes();
    setSize();
    $(window).on('resize', setSize);
    if (store.get('lasttrack') != null) {
      return playRow($("#playlist tr[data-id=" + (store.get('lasttrack')) + "]"));
    }
  });

}).call(this);
